Link del github donde he sacado los pasos: https://github.com/lsophiagr/os-system-call

Instalar VirtualBox Ubuntu 16.04 LTS: https://releases.ubuntu.com/xenial/

Una vez todo instalamos utilizamos estos comandos para ver la versión del kernel y pasar a root:

uname -r
sudo -s
Introducir librerías para poder compilar:

sudo apt-get install gcc
sudo apt-get install libncurses5-dev
sudo apt-get install bison
sudo apt-get install flex
sudo apt-get install libssl-dev
sudo apt-get install libelf-dev
sudo apt-get install make
sudo apt-get update
sudo apt-get upgrade
Vamos a src:

cd /usr/src
Descargamos el kernel nuevo 4.17.4:

wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.17.4.tar.xz
Y lo descomprimimos:

tar -xvf linux-4.17.4.tar.xz
Podemos crear una carpeta a parte o crear la función en la carpeta kernel (en este caso en kernel):

nano my_suma.c
#include <linux/kernel.h>
#include <linux/syscalls.h>

SYSCALL_DEFINE2(my_suma, int, a, int, b) {
    printf("KERN_INFO "Syscall suma: sumando %d y %d\n", a, return a + b");
}
Modificamos el Makefile de la carpeta kernel o creamos uno propio con el siguiente código:

obj-y += my_suma.o
Ahora vamos a la carpeta syscalls:

cd arch/x86/entry/syscalls/
nano syscall_64.tbl
Vamos al final del archivo o al final de la parte de 64 bits y colocamos el siguiente código:

548 64 suma __x64_sys_suma  
IMPORTANTE: el primer número no se tiene que repetir anteriormente

Ahora vamos a include/linux:

cd /usr/src/linux-4.17.4/include/linux/
nano syscalls.h
Colocar el código al final del archivo antes del último #endif:

asmlinkage long sys_my_suma(int a, int b);
Ahora vamos a compilar el kernel:

cd /usr/src/linux-4.17.4
make menuconfig
  File "<ipython-input-3-cc8adc1ac61e>", line 1
    cd /usr/src/linux-4.17.4
                          ^
SyntaxError: invalid syntax
Damos al botón de Save (crea un archivo .config) y después a Exit

make -j($nproc)
Esperamos a que termine de compilar todo el código

make modules_install install
Comprobamos que existe la carpeta vmlinuz-4.17.4 en cd /boot/, y reiniciamos:

shutdown -r now
Una vez iniciado de nuevo el sistema operativo vemos si ha cambiado el kernel con:

uname -r
Ahora creamos un código en C por ejemplo en el Escritorio como este:

#include <stdio.h>
#include <unistd.h>
#include <sys/syscall.h>

#define SYS_my_syscall 548

int main() {
    int resultado = syscall(SYS_my_syscall, 5, 3);
    printf("El resultado de my_syscall es: %d\n", resultado);
    return 0;
}
gcc archivo.c
./a.out
Si sale el resultado bien, todo funciona correctamente
